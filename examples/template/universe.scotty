# {#t host,environment,application,datasource #}
# Application Classes
#
{#

 Set set = database.query(new Context("type=application"), "app");

 output.print("applications=");
 boolean first = true;
 for (String value : set) {
    if (first) {
        first = false;
    } else {
        output.print(',');
    }
    output.print(value);
 }

 output.print("\n\n");

 String[] display = new String[]{"name","port","artifactName","repoPath","mainUrl","serviceUrl","jmxPort","protocol","statusUrl"};

 for (String key : set)
 {
    Context c = new Context(null, "type=application,app=" + key);
    List matches = database.query(c);

    Instance i = matches.get(0);

       String prefix = key + ".";
       for (String attr : display) {
           if (i.containsKey(attr)) {
              output.format("%s%s=%s\n", new Object[]{prefix, attr, i.get(attr)});
           }
       }
       output.print('\n');

 }

#}
#
# Databases Instances by Name.Env (Datasource by Name.Env.Host)
#
{#
  Set set = database.query(new Context("type=datasource"), "database");
  output.print("databases=");
  boolean first = true;
  for (String database : set) {
     if (first) {
         first = false;
     } else {
         output.print(',');
     }
     output.print(database);
  }

  output.print("\n\n");
  String[] display = new String[]{"port","jdbcUrl"};
   for (String key : set)
   {
      Context c = new Context(null, "type=datasource,database=" + key);
      List matches = database.query(c);
      for (Instance i : matches) {
        if (i.get("database") == null || i.get("env") == null || i.get("host") == null) {
           continue;
        }
        Value envValue = i.getValue("env");
        for (String envName : envValue.values()) {
           String prefix = i.get("database") + "." + envName + "." + i.get("host").toUpperCase();

           output.format("%s.database.%s=%s\n", new Object[]{ prefix, "host", i.get("hostName","") });
           output.format("%s.database.%s=%s\n", new Object[]{ prefix, "readPassword", i.get("password","") });
           output.format("%s.database.%s=%s\n", new Object[]{ prefix, "readUser", i.get("username","") });

           for (String key : display) {
              output.format("%s.database.%s=%s\n", new Object[]{ prefix, key, i.get(key,"") });
           }
           output.println("");
        }
      }
   }
#}
#
# Application instances by Environment.Host
#
{#
 Set set = database.query(new Context("type=host"), "env");
 output.print("environments=");
 boolean first = true;
 for (String env : set) {
    if (first) {
        first = false;
    } else {
        output.print(',');
    }
    output.print(env);
 }

 output.print("\n\n");

 for (String key : set)
 {
    Context environment = database.getContained().get("environment").getContained().get(key);
    output.format("%s.%s=%s\n", new Object[]{key, "name", environment.get("name")});
    output.format("%s.%s=%s\n", new Object[]{key, "jndi", environment.get("jndi")});
    output.format("%s.%s=%s\n", new Object[]{key, "container", environment.get("container","")});

    Context c = new Context("type=host,env=" + key);
    List matches = database.query(c);
    output.print(key + ".instances=");
    first = true;
    for (Instance i : matches) {
       if (first) {
          first=false;
       } else {
          output.print(',');
       }
       output.print(i.getName());
    }
    output.println("\n");

    for (Instance i : matches) {
       String prefix = environment.getName() + "." + i.get("instance").toUpperCase() + ".";
       output.println(prefix + "name=" + i.get("serverName"));
       output.println(prefix + "host=" + i.get("serverHost"));
       output.println(prefix + "domain=" + environment.get("domain"));
       output.println(prefix + "ec2Proxy=" + environment.get("ec2Proxy",""));
       output.print(prefix + "apps=");

       Value apps = i.getValue("app");
       if (apps != null) {
          first = true;
          for (String app : apps.values()) {
              if (first) {
                 first=false;
              } else {
                 output.print(',');
              }
              output.print(app);
          }
       }
       output.println('\n');
    }
 }

#}
